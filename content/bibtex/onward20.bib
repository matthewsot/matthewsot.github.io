@inproceedings{sotoudeh:analogy_making,
    author = {Sotoudeh, Matthew and Thakur, Aditya V.},
    title = {Analogy-Making as a Core Primitive in the Software Engineering Toolbox},
    year = {2020},
    isbn = {9781450381789},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/3426428.3426918},
    doi = {10.1145/3426428.3426918},
    abstract = {An analogy is an identification of structural similarities and correspondences between two objects. Computational models of analogy making have been studied extensively in the field of cognitive science to better understand high-level human cognition. For instance, Melanie Mitchell and Douglas Hofstadter sought to better understand high-level perception by developing the Copycat algorithm for completing analogies between letter sequences. In this paper, we argue that analogy making should be seen as a core primitive in software engineering. We motivate this argument by showing how complex software engineering problems such as program understanding and source-code transformation learning can be reduced to an instance of the analogy-making problem. We demonstrate this idea using Sifter, a new analogy-making algorithm suitable for software engineering applications that adapts and extends ideas from Copycat. In particular, Sifter reduces analogy-making to searching for a sequence of update rule applications. Sifter uses a novel representation for mathematical structures capable of effectively representing the wide variety of information embedded in software.},
    booktitle = {Proceedings of the 2020 ACM SIGPLAN International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software},
    pages = {101â€“121},
    numpages = {21},
    keywords = {static analysis, program understanding, software maintenance, fluid analogies},
    location = {Virtual, USA},
    series = {Onward! 2020}
}
